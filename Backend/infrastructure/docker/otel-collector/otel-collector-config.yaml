# OpenTelemetry Collector Configuration - Production
# VOXAR Enterprise Platform Telemetry Pipeline

receivers:
  # OTLP receiver for services
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
        cors:
          allowed_origins:
            - "https://api.voxar.io"
            - "https://monitoring.voxar.io" 
            - "http://localhost:*"

  # Prometheus metrics scraping
  prometheus:
    config:
      global:
        scrape_interval: 15s
        evaluation_interval: 15s
      scrape_configs:
        # Spatial AR services
        - job_name: 'spatial-gateway'
          static_configs:
            - targets: ['gateway:8000']
          metrics_path: '/metrics'
          scrape_interval: 10s
          
        - job_name: 'spatial-localization'
          static_configs:
            - targets: ['localization:8080']
          metrics_path: '/metrics'
          scrape_interval: 5s  # High frequency for AR performance
          
        - job_name: 'spatial-vps-engine'
          static_configs:
            - targets: ['vps-engine:9000']
          metrics_path: '/metrics'
          scrape_interval: 5s
          
        - job_name: 'spatial-cloud-anchors'
          static_configs:
            - targets: ['cloud-anchor-service:9001']
          metrics_path: '/metrics'
          scrape_interval: 10s
          
        - job_name: 'spatial-mapping'
          static_configs:
            - targets: ['mapping-processor:8080']
          metrics_path: '/metrics'
          scrape_interval: 30s
          
        # Infrastructure services
        - job_name: 'nakama'
          static_configs:
            - targets: ['nakama:9100']
          metrics_path: '/metrics'
          scrape_interval: 15s
          
        - job_name: 'postgres-cluster'
          static_configs:
            - targets: ['postgres-exporter:9187']
          metrics_path: '/metrics'
          scrape_interval: 30s
          
        - job_name: 'redis'
          static_configs:
            - targets: ['redis:6379']
          metrics_path: '/metrics'
          scrape_interval: 30s

  # Jaeger receiver for legacy traces
  jaeger:
    protocols:
      grpc:
        endpoint: 0.0.0.0:14250
      thrift_http:
        endpoint: 0.0.0.0:14268

  # Log receivers
  filelog:
    include:
      - /tmp/logs/*.log
    operators:
      - type: json_parser
        id: json_parser
        output: spatial_parser
      - type: regex_parser
        id: spatial_parser
        regex: '^(?P<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z) (?P<level>\w+) (?P<service>\w+) (?P<message>.*)'
        timestamp:
          parse_from: attributes.timestamp
          layout: '%Y-%m-%dT%H:%M:%S.%fZ'

processors:
  # Memory limiter to prevent OOM
  memory_limiter:
    limit_mib: 1024
    spike_limit_mib: 256
    check_interval: 1s

  # Batch processing for performance
  batch:
    timeout: 1s
    send_batch_size: 1024
    send_batch_max_size: 2048

  # Resource processor for service identification
  resource:
    attributes:
      - key: service.namespace
        value: "voxar.platform"
        action: upsert
      - key: service.version
        from_attribute: "app.version"
        action: upsert
      - key: deployment.environment
        from_attribute: "ENVIRONMENT"
        action: upsert

  # Attribute processing for AR-specific metrics
  attributes:
    actions:
      # AR performance attributes
      - key: ar.session.id
        action: upsert
        from_attribute: session_id
      - key: ar.frame.rate
        action: upsert
        from_attribute: fps
      - key: ar.tracking.quality
        action: upsert
        from_attribute: tracking_quality
      - key: spatial.map.id
        action: upsert
        from_attribute: map_id
      - key: spatial.anchor.count
        action: upsert
        from_attribute: anchor_count

  # Probabilistic sampling for high-volume traces
  probabilistic_sampler:
    sampling_percentage: 10.0
    hash_seed: 42

  # Span processing for AR-specific data
  span:
    name:
      # Rename spans for clarity
      to_attributes:
        rules:
          - pattern: 'POST /api/v1/localization/track'
            name: 'spatial.localization.track'
          - pattern: 'POST /api/v1/vps/localize'
            name: 'spatial.vps.localize'
          - pattern: 'POST /api/v1/anchors/create'
            name: 'spatial.anchors.create'

  # Filter processor for noise reduction
  filter:
    spans:
      # Filter out health check spans
      exclude:
        match_type: strict
        attributes:
          - key: http.target
            value: /health
          - key: http.target
            value: /metrics

exporters:
  # Prometheus metrics export
  prometheus:
    endpoint: "0.0.0.0:8889"
    namespace: "voxar"
    const_labels:
      platform: "spatial-ar"
    metric_relabeling:
      - source_labels: [__name__]
        regex: 'ar_(.+)'
        target_label: __name__
        replacement: 'voxar_ar_${1}'

  # Jaeger tracing export
  jaeger:
    endpoint: jaeger:14250
    tls:
      insecure: true

  # Grafana Loki for logs
  loki:
    endpoint: http://loki:3100/loki/api/v1/push
    tenant_id: "voxar-platform"
    labels:
      attributes:
        service.name: "service_name"
        service.namespace: "service_namespace"
        level: "level"

  # Development/debugging exporters
  debug:
    verbosity: normal
    sampling_initial: 5
    sampling_thereafter: 200

  # File export for backup
  file:
    path: /tmp/otel/traces.json
    rotation:
      max_megabytes: 100
      max_days: 7
      max_backups: 3

extensions:
  # Health check endpoint
  health_check:
    endpoint: 0.0.0.0:13133
    path: /health

  # Performance profiling
  pprof:
    endpoint: 0.0.0.0:1777

  # Prometheus metrics for collector itself
  zpages:
    endpoint: 0.0.0.0:55679

service:
  extensions: [health_check, pprof, zpages]
  
  pipelines:
    # Metrics pipeline
    metrics:
      receivers: [otlp, prometheus]
      processors: [memory_limiter, batch, resource, attributes]
      exporters: [prometheus, debug]

    # Traces pipeline  
    traces:
      receivers: [otlp, jaeger]
      processors: [memory_limiter, batch, resource, attributes, probabilistic_sampler, span, filter]
      exporters: [jaeger, debug]

    # Logs pipeline
    logs:
      receivers: [otlp, filelog]
      processors: [memory_limiter, batch, resource, attributes]
      exporters: [loki, debug]

  # Telemetry for collector itself
  telemetry:
    logs:
      level: "info"
    metrics:
      level: detailed
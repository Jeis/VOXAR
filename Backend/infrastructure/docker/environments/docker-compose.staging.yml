# VOXAR Staging Environment
# Pre-production environment with production-like settings

version: '3.8'

services:
  # =================== STAGING OVERRIDES ===================
  
  postgres:
    environment:
      POSTGRES_PASSWORD: staging_password_change_me
    command: >
      postgres 
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=300
      -c shared_buffers=512MB
      -c effective_cache_size=2GB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c log_statement=mod
      -c log_min_duration_statement=1000
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 3G
        reservations:
          cpus: '0.5'
          memory: 1G

  redis:
    environment:
      - REDIS_PASSWORD=staging_redis_password
    command: >
      redis-server 
      --appendonly yes 
      --requirepass staging_redis_password
      --maxmemory 2gb 
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 300
      --timeout 300
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 512M

  minio:
    environment:
      MINIO_ROOT_USER: staging_admin
      MINIO_ROOT_PASSWORD: staging_password_change_me
      MINIO_PROMETHEUS_AUTH_TYPE: public
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # =================== STAGING MULTIPLAYER ===================
  
  nakama:
    entrypoint:
      - "/bin/sh"
      - "-ecx"
      - >
        echo "Starting Nakama Staging..." &&
        wait-for-it postgres:5432 -t 60 &&
        /nakama/nakama migrate up --database.address postgres://spatial_admin:staging_password_change_me@postgres:5432/spatial_platform?sslmode=disable &&
        exec /nakama/nakama 
        --name spatial-ar-staging
        --database.address postgres://spatial_admin:staging_password_change_me@postgres:5432/spatial_platform?sslmode=disable
        --logger.level INFO
        --metrics.prometheus_port 9100
        --console.port 7351
        --console.username spatial_admin
        --console.password staging_console_password
        --session.token_expiry_sec 7200
        --socket.max_message_size_bytes 8192
        --runtime.http_key staging_nakama_key
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # =================== STAGING SPATIAL SERVICES ===================
  
  gateway:
    environment:
      - ENVIRONMENT=staging
      - LOG_LEVEL=INFO
    command: >
      sh -c "wait-for-it nakama:7350 -t 60 -- 
             wait-for-it localization:8080 -t 60 -- 
             uvicorn app:app --host 0.0.0.0 --port 8000 --workers 4"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  localization:
    environment:
      - DATABASE_URL=postgresql://spatial_admin:staging_password_change_me@postgres:5432/spatial_platform
      - REDIS_URL=redis://:staging_redis_password@redis:6379/1
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=staging_admin
      - MINIO_SECRET_KEY=staging_password_change_me
      - LOG_LEVEL=INFO
      - ENVIRONMENT=staging
    command: >
      sh -c "wait-for-it postgres:5432 -t 60 -- 
             wait-for-it redis:6379 -t 60 -- 
             wait-for-it minio:9000 -t 60 -- 
             uvicorn app:app --host 0.0.0.0 --port 8080 --workers 3"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # =================== OPTIONAL STAGING SERVICES ===================
  
  vps-engine:
    build:
      context: ../../
      dockerfile: infrastructure/docker/vps/Dockerfile
    container_name: spatial-vps-engine
    environment:
      - DATABASE_URL=postgresql://spatial_admin:staging_password_change_me@postgres:5432/spatial_platform
      - REDIS_URL=redis://:staging_redis_password@redis:6379/6
      - STORAGE_ENDPOINT=minio:9000
      - STORAGE_ACCESS_KEY=staging_admin
      - STORAGE_SECRET_KEY=staging_password_change_me
      - STORAGE_BUCKET=vps-maps
      - JWT_SECRET=staging_jwt_secret_key
      - LOG_LEVEL=INFO
      - ENVIRONMENT=staging
      - PORT=9000
    volumes:
      - ./vps_maps:/app/vps_maps
      - ./cache:/app/cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: >
      sh -c "wait-for-it postgres:5432 -t 60 -- 
             wait-for-it redis:6379 -t 60 -- 
             wait-for-it minio:9000 -t 60 -- 
             python main.py"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    restart: unless-stopped
    networks:
      - spatial-network
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 3G
        reservations:
          cpus: '0.5'
          memory: 1G
    profiles:
      - vps
      - full

  cloud-anchor-service:
    build:
      context: ../../
      dockerfile: infrastructure/docker/cloud-anchor/Dockerfile
    container_name: spatial-cloud-anchor
    environment:
      - DATABASE_URL=postgresql://spatial_admin:staging_password_change_me@postgres:5432/spatial_platform
      - REDIS_URL=redis://:staging_redis_password@redis:6379/7
      - JWT_SECRET=staging_jwt_secret_key
      - LOG_LEVEL=INFO
      - ENVIRONMENT=staging
      - PORT=9001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "wait-for-it postgres:5432 -t 60 -- 
             wait-for-it redis:6379 -t 60 -- 
             python main.py"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    restart: unless-stopped
    networks:
      - spatial-network
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    profiles:
      - anchors
      - full

  # =================== STAGING MONITORING ===================
  
  prometheus:
    ports:
      - "9090:9090"

  grafana:
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=staging_grafana_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3000:3000"
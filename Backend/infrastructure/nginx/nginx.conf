# Enterprise nginx Configuration for VOXAR Platform
# Production-ready with TLS, rate limiting, and security headers

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Performance tuning
worker_rlimit_nofile 65535;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging with performance metrics
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main buffer=32k flush=5s;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100;
    reset_timedout_connection on;
    client_body_timeout 10;
    client_header_timeout 10;
    send_timeout 10;

    # Compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss 
               application/rss+xml application/atom+xml image/svg+xml 
               text/x-js text/x-cross-domain-policy application/x-font-ttf 
               application/x-font-opentype application/vnd.ms-fontobject 
               image/x-icon;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self' https: data: 'unsafe-inline' 'unsafe-eval';" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/s;
    limit_req_zone $binary_remote_addr zone=websocket:10m rate=50r/s;
    limit_conn_zone $binary_remote_addr zone=addr:10m;

    # Connection limits
    limit_conn addr 100;

    # Upstream definitions with health checks
    upstream api_gateway {
        least_conn;
        server gateway:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream nakama_http {
        least_conn;
        server nakama:7350 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream nakama_grpc {
        least_conn;
        server nakama:7348 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream nakama_ws {
        least_conn;
        server nakama:7349 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream nakama_console {
        server nakama:7351 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    upstream localization {
        least_conn;
        server localization:8080 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream mapping {
        least_conn;
        server mapping-processor:8080 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    upstream prometheus {
        server prometheus:9090;
        keepalive 8;
    }

    upstream grafana {
        server grafana:3000;
        keepalive 8;
    }

    # Cache configuration
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=api_cache:10m max_size=1g inactive=60m use_temp_path=off;
    proxy_cache_path /var/cache/nginx/static levels=1:2 keys_zone=static_cache:10m max_size=5g inactive=7d use_temp_path=off;

    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;

    # Redirect HTTP to HTTPS
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;
        
        # Allow Let's Encrypt challenges
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # Main HTTPS server
    server {
        listen 443 ssl http2 default_server;
        listen [::]:443 ssl http2 default_server;
        server_name api.voxar.io;

        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;
        ssl_trusted_certificate /etc/nginx/ssl/chain.pem;

        # Security
        client_max_body_size 100M;
        client_body_buffer_size 1M;
        large_client_header_buffers 4 32k;

        # API Gateway
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://api_gateway;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            
            # Timeouts
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Caching
            proxy_cache api_cache;
            proxy_cache_valid 200 1m;
            proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
            proxy_cache_bypass $http_cache_control;
            add_header X-Cache-Status $upstream_cache_status;
        }

        # Nakama HTTP API
        location /nakama/ {
            limit_req zone=api burst=50 nodelay;
            
            rewrite ^/nakama/(.*) /$1 break;
            proxy_pass http://nakama_http;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Nakama WebSocket
        location /ws {
            limit_req zone=websocket burst=10 nodelay;
            limit_conn addr 10;
            
            proxy_pass http://nakama_ws;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket timeouts
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;
            
            # Disable buffering for WebSocket
            proxy_buffering off;
        }

        # Nakama gRPC
        location /nakama.grpc {
            grpc_pass grpcs://nakama_grpc;
            
            # gRPC-specific settings
            grpc_read_timeout 300s;
            grpc_send_timeout 300s;
            client_body_timeout 60s;
            client_body_buffer_size 8k;
            
            # Security headers for gRPC
            add_header 'Access-Control-Allow-Origin' '$http_origin' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-Session-Token' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        }

        # Localization Service
        location /localization/ {
            limit_req zone=api burst=30 nodelay;
            
            rewrite ^/localization/(.*) /$1 break;
            proxy_pass http://localization;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Mapping Service
        location /mapping/ {
            limit_req zone=api burst=10 nodelay;
            client_max_body_size 500M; # Large uploads for 3D data
            
            rewrite ^/mapping/(.*) /$1 break;
            proxy_pass http://mapping;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 30s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            
            # Progress updates for large uploads
            proxy_request_buffering off;
        }

        # Authentication endpoints with stricter rate limiting
        location /auth/ {
            limit_req zone=auth burst=2 nodelay;
            
            proxy_pass http://api_gateway;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Stricter timeouts for auth
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }

        # Health check endpoint (no rate limiting)
        location /health {
            access_log off;
            proxy_pass http://api_gateway/health;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
        }

        # Metrics endpoint (internal only)
        location /metrics {
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            
            proxy_pass http://prometheus/metrics;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
        }

        # Static files with aggressive caching
        location /static/ {
            alias /var/www/static/;
            expires 7d;
            add_header Cache-Control "public, immutable";
            
            # Enable gzip for static files
            gzip_static on;
            
            # Security headers for static content
            add_header X-Content-Type-Options "nosniff" always;
        }

        # Block common attack patterns
        location ~ /\.(git|svn|hg|bzr) {
            deny all;
        }
        
        location ~ /\.(bak|config|sql|fla|psd|ini|log|sh|inc|swp|dist)$ {
            deny all;
        }
    }

    # Monitoring server (Grafana)
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name monitoring.voxar.io;

        ssl_certificate /etc/nginx/ssl/monitoring-fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/monitoring-privkey.pem;

        # Basic auth for monitoring
        auth_basic "Monitoring Access";
        auth_basic_user_file /etc/nginx/.htpasswd;

        location / {
            proxy_pass http://grafana;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /prometheus/ {
            rewrite ^/prometheus/(.*) /$1 break;
            proxy_pass http://prometheus;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
        }
    }

    # Admin console (Nakama)
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name admin.voxar.io;

        ssl_certificate /etc/nginx/ssl/admin-fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/admin-privkey.pem;

        # IP whitelist for admin access
        allow 10.0.0.0/8;      # Internal network
        allow 172.16.0.0/12;   # Docker network
        # Add your office IPs here
        # allow 203.0.113.0/24;
        deny all;

        # Additional auth for admin
        auth_basic "Admin Console";
        auth_basic_user_file /etc/nginx/.htpasswd-admin;

        location / {
            proxy_pass http://nakama_console;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}